<?php
/**
* @file
* Install, update and uninstall functions
* for the College Sites installation profile. */
/**
* Implements hook_install().
*
* Run the hook_install() function from the minimal
*  profile as part of this profile.
*/
function collegesites_install() {
 // Utilize the hook_install() implementation from
 // the minimal profile.
 include_once DRUPAL_ROOT . '/profiles/minimal/minimal.install'; 
 minimal_install();


// Enable the administration theme. 

$admin_theme = 'rubik'; 
db_update('system')
	->fields(array('status' => 1)) 
	->condition('type', 'theme') 
	->condition('name', $admin_theme) 
	->execute();
variable_set('admin_theme', $admin_theme);
variable_set('node_admin_theme', '1');

// Configure Text Formats
// Text formats can be found in the filter table of the db
$clean_html_format = array(
    'format' => 'clean_html',
    'name' => 'Clean HTML',
    'weight' => 0,
    'filters' => array(
      //Image Resize filter
      'image_resize_filter' => array(
	  	'weight' => -45,
	  	'status' => 1,
	  ),
      // Media filter
      'media_filter' => array(
	  	'weight' => -46,
	  	'status' => 1,
	  ),
      // HTML filter.
      'html_purifier_advanced' => array(
        'weight' => -44,
        'status' => 1,
      ),
    ),
  );
  $clean_html_format = (object) $clean_html_format;
  filter_format_save($clean_html_format);
 
$full_html_format = array(
    'format' => 'full_html',
    'name' => 'Full HTML',
    'weight' => 1,
    'filters' => array(
	  // URL filter.
      'filter_url' => array(
        'weight' => 0,
        'status' => 1,
      ),    
	  // Image Resize Filter.
	  'image_resize_filter' => array(
	  	'weight' => 0,
	  	'status' => 1,
	  ),
	  // Line break filter.
      'filter_autop' => array(
        'weight' => 1,
        'status' => 1,
      ),
      //Media Filter.
      'media_filter' => array(
	  	'weight' => 2,
	  	'status' => 1,
	  ),
      // HTML corrector filter.
      'filter_htmlcorrector' => array(
        'weight' => 10,
        'status' => 1,
      ),
    ),
  );
  $full_html_format = (object) $full_html_format;
  filter_format_save($full_html_format);

// Insert default pre-defined node types into the database. For a complete
// list of available node type attributes, refer to the node type API
// documentation at: http://api.drupal.org/api/HEAD/function/hook_node_info.
  $types = array(
    array(
      'type' => 'page',
      'name' => st('Basic page'),
      'base' => 'node_content',
      'description' => st("Use <em>basic pages</em> for your static content, such as an 'About us' page."),
      'custom' => 1,
      'modified' => 1,
      'locked' => 0,
    ),
    array(
      'type' => 'article',
      'name' => st('Article'),
      'base' => 'node_content',
      'description' => st('Use <em>articles</em> for time-sensitive content like news, press releases or blog posts.'),
      'custom' => 1,
      'modified' => 1,
      'locked' => 0,
    ),
  );

  foreach ($types as $type) {
    $type = node_type_set_defaults($type);
    node_type_save($type);
    node_add_body_field($type);
  }

  // Insert default pre-defined RDF mapping into the database.
  $rdf_mappings = array(
    array(
      'type' => 'node',
      'bundle' => 'page',
      'mapping' => array(
        'rdftype' => array('foaf:Document'),
      ),
    ),
    array(
      'type' => 'node',
      'bundle' => 'article',
      'mapping' => array(
        'field_image' => array(
          'predicates' => array('og:image', 'rdfs:seeAlso'),
          'type' => 'rel',
        ),
        'field_tags' => array(
          'predicates' => array('dc:subject'),
          'type' => 'rel',
        ),
      ),
    ),
  );
  foreach ($rdf_mappings as $rdf_mapping) {
    rdf_mapping_save($rdf_mapping);
  }

  // Default "Basic page" to not be promoted and have comments disabled.
  variable_set('node_options_page', array('status'));
  variable_set('comment_page', COMMENT_NODE_HIDDEN);

  // Don't display date and author information for "Basic page" nodes by default.
  variable_set('node_submitted_page', FALSE);

  // Enable user picture support and set the default to a square thumbnail option.
  variable_set('user_pictures', '1');
  variable_set('user_picture_dimensions', '1024x1024');
  variable_set('user_picture_file_size', '800');
  variable_set('user_picture_style', 'thumbnail');
  

  // Create an image field named "Image", enabled for the 'Basic Page' content type.
  // Many of the following values will be defaulted, they're included here as an illustrative examples.
  // See http://api.drupal.org/api/function/field_create_field/7

  $field = array(
    'field_name' => 'field_image',
    'type' => 'image',
    'cardinality' => 1,
    'locked' => FALSE,
    'indexes' => array('fid' => array('fid')),
    'settings' => array(
      'uri_scheme' => 'public',
      'default_image' => FALSE,
    ),
    'storage' => array(
      'type' => 'field_sql_storage',
      'settings' => array(),
    ),
  );
  field_create_field($field);


  // Many of the following values will be defaulted, they're included here as an illustrative examples.
  // See http://api.drupal.org/api/function/field_create_instance/7
  $instance = array(
    'field_name' => 'field_image',
    'entity_type' => 'node',
    'label' => 'Image',
    'bundle' => 'page',
    'description' => st('Upload an image to insert into the page.'),
    'required' => FALSE,

    'settings' => array(
      'file_directory' => 'field/image',
      'file_extensions' => 'png gif jpg jpeg',
      'max_filesize' => '',
      'max_resolution' => '',
      'min_resolution' => '',
      'alt_field' => TRUE,
      'title_field' => TRUE,
    ),

    'widget' => array(
      'type' => 'image_image',
      'settings' => array(
        'progress_indicator' => 'throbber',
        'preview_image_style' => 'thumbnail',
      ),
      'weight' => -1,
    ),

    'display' => array(
      'default' => array(
        'label' => 'hidden',
        'type' => 'image',
        'settings' => array('image_style' => 'large', 'image_link' => ''),
        'weight' => -1,
      ),
      'teaser' => array(
        'label' => 'hidden',
        'type' => 'image',
        'settings' => array('image_style' => 'medium', 'image_link' => 'content'),
        'weight' => -1,
      ),
    ),
  );
  field_create_instance($instance);
  
   // Enable default permissions for system roles.
//  $clean_html_permission = filter_permission_name($clean_html_format);
//  user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, array('access content', 'access comments', $clean_html_permission));
//  user_role_grant_permissions(DRUPAL_AUTHENTICATED_RID, array('access content', 'access comments', 'post comments', 'skip comment approval', $clean_html_permission));

  // Create a default role for site administrators, with all available permissions assigned.
  $admin_role = new stdClass();
  $admin_role->name = 'administrator';
  $admin_role->weight = 2;
  user_role_save($admin_role);
  user_role_grant_permissions($admin_role->rid, array_keys(module_invoke_all('permission')));
  // Set this as the administrator role.
  variable_set('user_admin_role', $admin_role->rid);

  // Assign user 1 the "administrator" role.
  db_insert('users_roles')
    ->fields(array('uid' => 1, 'rid' => $admin_role->rid))
    ->execute();
/*	
  // Create the Editor Role for use with Workbench.
  $editor_role = new stdClass();
  $editor_role->name = 'editor';
  $editor_role->weight = 3;
  user_role_save($editor_role);
 user_role_grant_permissions($editor_role->rid, array('access content', 'access comments', 'post comments', 'skip comment approval', $clean_html_perimssion, 'access administration menu', 'access administration pages', 'access content overview', 'access contextual links', 'access overlay', 'access toolbar', 'access workbench', 'access workbench access by role', 'add media from remote sources', 'administer menu', 'assign workbench access', 'create page content', 'crop any image', 'crop own images', 'edit file', 'edit own page content', 'import media', 'moderate content from draft to needs_review', 'moderate content from needs_review to draft', 'moderate content from needs_review to published' , 'revert revisions', 'use text format clean_html', 'use workbench_media add form', 'use workbench_moderation my drafts tab', 'view moderation history', 'view moderation messages', 'view own unpublished content', 'view revisions'));
  //Set this as the Editor role
  //variable_set('user_editor_role', $editor_role->rid);
  
 //Create the Writer role for use with Workbench.
  $writer_role = new stdClass();
  $writer_role->name = 'writer';
  $writer_role->weight = 4;
  user_role_save($writer_role);
  user_role_grant_permissions($writer_role->rid, array('access administration pages', 'access content overview', 'access overlay', 'access toolbar', 'access workbench', 'access workbench access by role', 'add media from remote sources', 'assign workbench access', 'create department content', 'create page content', 'crop any image', 'crop own images', 'edit file', 'edit own page content', 'import media', 'moderate content from draft to needs_review', 'revert revisions', 'use text format clean_html', 'use workbench_media add form', 'use workbench_moderation my drafts tab', 'view moderation history', 'view moderation messages', 'view own unpublished content', 'view revisions'));
 //Set this as the Writer role
 // variable_set('user_writer_role', $writer_role->rid);
*/
  // Create a Home link in the main menu.
  $item = array(
    'link_title' => st('Home'),
    'link_path' => '<front>',
    'menu_name' => 'main-menu',
  );
  menu_link_save($item);

  // Update the menu router information.
  menu_rebuild();

//WYSIWYG Settings for CKeditor based on Linux Journal Drupal special edition, page 96.
$clean_html_settings = array( 
	'default' => 1,
	'user_choose' => 0, 
	'show_toggle' => 0, 
	'theme' => 'advanced', 
	'language' => 'en', 
	'buttons' => array(
		'default' => array( 
			'Bold' => 1, 
			'Italic' => 1,
			'Underline' => 1, 
			'Strike' => 1, 
			'JustifyLeft' => 1, 
			'JustifyCenter' => 1, 
			'JustifyRight' => 1, 
			'JustifyBlock' => 1, 
			'BulletedList' => 1, 
			'NumberedList' => 1,
			'Outdent' => 1,
			'Indent' => 1,
			'Undo' => 1,
			'Redo' => 1, 
			'Link' => 1, 
			'Unlink' => 1, 
			'Anchor' => 1, 
			'Image' => 1, 
			'Superscript' => 1,
			'Subscript' => 1, 
			'Blockquote' => 1,
			'Cut' => 1,
			'Copy' => 1,
			'PasteText' => 1,
			'PasteFromWord' => 1,
			'SpecialChar' => 1,
			'Format' => 1,
			'FontSize' => 1,
			'Styles' => 1,
			'Table' => 1,
			'Find' => 1,
			'Replace' => 1, 
			'SpellChecker' => 1,
			'Scayt' => 1,
			'media' => 1
			), 
		),
	'toolbar_loc' => 'top', 
	'toolbar_align' => 'left', 
	'path_loc' => 'bottom', 
	'resizing' => 1, 
	'verify_html' => 1,
	'preformatted' => 0,
	'convert_fonts_to_spans' => 1,
	'remove_linebreaks' => 1,
	'apply_source_formatting' => 1, 
	'paste_auto_cleanup_on_paste' => 1,
	'block_formats' => 'p,address,pre,h2,h3,h4,h5,h6,div', 
	'css_setting' => 'self',
	'css_path' => '/sites/all/themes/wwuzen/css/pages.css',
	'css_classes' => '', );

	// Create the record. 
	$record = array(
		'format' => 'clean_html', 
		'editor' => 'ckeditor', 
		'settings' => $clean_html_settings,
	);
// Save the record to the database. 
	drupal_write_record('wysiwyg', $record);

//WYSIWYG Settings for CKeditor based on Linux Journal Drupal special edition, page 96.
$full_html_settings = array( 
	'default' => 1,
	'user_choose' => 0, 
	'show_toggle' => 0, 
	'theme' => 'advanced', 
	'language' => 'en', 
	'buttons' => array(
		'default' => array( 
			'Bold' => 1, 
			'Italic' => 1,
			'Underline' => 1, 
			'Strike' => 1, 
			'JustifyLeft' => 1, 
			'JustifyCenter' => 1, 
			'JustifyRight' => 1, 
			'JustifyBlock' => 1, 
			'BulletedList' => 1, 
			'NumberedList' => 1,
			'Outdent' => 1,
			'Indent' => 1,
			'Undo' => 1,
			'Redo' => 1, 
			'Link' => 1, 
			'Unlink' => 1, 
			'Anchor' => 1, 
			'Image' => 1,
			'TextColor' => 1,
			'BGColor' => 1,
			'Superscript' => 1,
			'Subscript' => 1, 
			'Blockquote' => 1,
			'Source' => 1,
			'HorizontalRule' => 1,
			'Cut' => 1,
			'Copy' => 1,
			'PasteText' => 1,
			'PasteFromWord' => 1,
			'ShowBlocks' => 1,
			'RemoveFormat' => 1,
			'SpecialChar' => 1,
			'Format' => 1,
			'FontSize' => 1,
			'Styles' => 1,
			'Table' => 1,
			'SelectAll' => 1,
			'Find' => 1,
			'Replace' => 1, 
			'Flash' => 1,
			'Smiley' => 1,
			'CreateDiv' => 1,
			'Iframe' => 1,
			'Maximize' => 1,
			'SpellChecker' => 1,
			'Scayt' => 1,
			'media' => 1
			), 
		),
	'toolbar_loc' => 'top', 
	'toolbar_align' => 'left', 
	'path_loc' => 'bottom', 
	'resizing' => 1, 
	'verify_html' => 1,
	'preformatted' => 0,
	'convert_fonts_to_spans' => 1,
	'remove_linebreaks' => 1,
	'apply_source_formatting' => 1, 
	'paste_auto_cleanup_on_paste' => 1,
	'block_formats' => 'p,address,pre,h2,h3,h4,h5,h6,div', 
	'css_setting' => 'self',
	'css_path' => '/sites/all/themes/wwuzen/css/pages.css',
	'css_classes' => '', );

	// Create the record. 
	$record = array(
		'format' => 'full_html', 
		'editor' => 'ckeditor', 
		'settings' => $full_html_settings,
	);
// Save the record to the database. 
	drupal_write_record('wysiwyg', $record);

  
//End of Configuration  
}